State Management with Zustand:

Reason: Zustand is a small, fast, and scalable state-management solution. It offers a straightforward API and is designed to work seamlessly with React.
Usage: Zustand is used to manage authentication state, product data, inventory, and invoice-related actions. This keeps the global state centralized and simplifies state updates.
Axios for HTTP Requests:

Reason: Axios is a promise-based HTTP client that simplifies making requests to your backend API. It offers easy-to-use methods and better error handling compared to the native fetch API.
Usage: Axios is used to make API calls to register and login users, fetch products, manage inventory, and handle invoices.
Cookies for Token Storage:

Reason: Cookies are a simple and secure way to store the authentication token on the client side.
Usage: The token is stored in a cookie to maintain the user's authenticated state across sessions and is used in headers for authenticated API calls.
Styled Components:

Reason: Styled Components allow you to write plain CSS in your JavaScript, enabling scoped and dynamic styling.
Usage: Styled Components are used to style the dashboard and other components, ensuring styles are encapsulated and easier to manage.
Formik for Form Handling:

Reason: Formik simplifies form handling in React, providing an easy way to manage form state, validation, and submission.
Usage: Formik is used to handle registration and login forms, ensuring robust form management and validation.
Tailwind CSS for Utility-First Styling:

Reason: Tailwind CSS provides utility classes that help in building responsive and custom-styled components efficiently.
Usage: Tailwind CSS is used alongside Styled Components to style the UI elements consistently and responsively.



Prerequisites
Node.js: Ensure you have Node.js installed. You can download it from here.
Step-by-Step Instructions
1. Clone the Repository
First, clone the repository to your local machine:

bash
Copy code
git clone https://github.com/your-repo/your-frontend-project.git
cd your-frontend-project
2. Install Dependencies
Install the required dependencies using npm or yarn:

bash
Copy code
# Using npm
npm install

# Using yarn
yarn install
3. Create a .env File
Create a .env file in the root of your project and add the necessary environment variables. An example .env file might look like this:

bash
Copy code
REACT_APP_API_URL=http://localhost:5000/api
4. Run the Development Server
Start the development server to run your React application locally:

bash
Copy code
# Using npm
npm start

# Using yarn
yarn start
The application should now be running on http://localhost:3000.

5. Building the Project
To create an optimized production build of your React application, run:

bash
Copy code
# Using npm
npm run build

# Using yarn
yarn build
This will generate a build directory containing your production-ready application.

Project Structure
Here's an overview of the project structure and important files:

java
Copy code
your-frontend-project/
├── public/
│   ├── index.html
│   └── ...
├── src/
│   ├── assets/
│   ├── components/
│   ├── pages/
│   ├── stores/
│   ├── App.js
│   ├── index.js
│   └── ...
├── .env
├── package.json
└── README.md
public/: Contains the static assets and the index.html file.
src/: Contains the source code of the application.
assets/: Contains images, fonts, and other static assets.
components/: Contains reusable UI components.
pages/:contain all the pages 


note : For some cors policy the 3rd api fake store products not come along in frontend in invoice. But it properly work on backend. 